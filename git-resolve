#!/usr/bin/env bash

yellow=$'\x1b[33m'
blue=$'\x1b[34m'
dim=$'\x1b[2m'
reset=$'\x1b[0m'

prompt_file() {
	local file
	file="$1"

	[ ! -e "$file" ] && return

	local content
	mapfile -t content <"$file"

	offset=0

	local lineno start end mid
	lineno=0
	start=0
	end=0
	mid=0

	local line
	for line in "${content[@]}"; do
		((lineno++))

		case "$line" in
		'<<<<<<<'*)
			start="$lineno"
			echo
			echo
			echo "${yellow}${line}${reset} ${dim}${their_msg}${reset}"
			;;
		'======='*)
			mid="$lineno"
			echo "${yellow}${line}${reset}"
			;;
		'>>>>>>>'*)
			end="$lineno"
			echo "${yellow}${line}${reset} ${dim}${our_msg}${reset}"
			echo
			echo "${blue}File: ${file}${reset}"
			prompt_conflict "$file" "$start" "$mid" "$end" || return
			;;
		*)
			[ "$start" -gt "$end" ] && echo "$line"
			;;
		esac
	done
}

prompt_conflict() {
	local file start end mid

	file="$1"
	start="$2"
	mid="$3"
	end="$4"

	((start+=offset))
	((mid+=offset))
	((end+=offset))

	local reply
	while read -r -p "${blue}Keep (t)op/(b)ottom, (e)dit, (s)kip conflict, skip (f)ile or (q)uit [t/b/e/s/f/q]? ${reset}" reply; do
		case "$reply" in
		[tT]*)
			sed -i "${mid},${end}d; ${start}d" "$file"
			((offset-=end-mid+2))
			;;
		[bB]*)
			sed -i "${start},${mid}d; ${end}d" "$file"
			((offset-=mid-start+2))
			;;
		[eE]*)
			local before after _
			read -r before _ < <(wc -l "$file")
			"${EDITOR:-vi}" "$file" +"$start"
			read -r after _ < <(wc -l "$file")
			((offset-=before-after))
			;;
		[sS]*)
			return 0
			;;
		[fF]*)
			return 1
			;;
		[qQ]*)
			exit
			;;
		*)
			continue
			;;
		esac
		break
	done
}

possible_refs=(
	"MERGE_HEAD"
	"REBASE_HEAD"
	"CHERRY_PICK_HEAD"
	"REVERT_HEAD"
)

for ref in "${possible_refs[@]}"; do
	git show-ref --verify -q "$ref" && {
		our_ref="$ref"
		break
	}
done

[ -z "$our_ref" ] && exit 1

declare -A files

their_msg="$(git log -1 --format=%s HEAD)"
our_msg="$(git log -1 --format=%s "$our_ref")"

while read -r file; do
	files["$file"]=
done < <(git diff --name-only --diff-filter=M)

for file in "${!files[@]}"; do
	prompt_file "$file"
done
